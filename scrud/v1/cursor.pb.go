// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: scrud/v1/cursor.proto

package scrudv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes a pagination cursor
type Cursor struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PrimaryId   *string                `protobuf:"bytes,1,opt,name=primary_id,json=primaryId"`
	xxx_hidden_IsBackwards bool                   `protobuf:"varint,2,opt,name=is_backwards,json=isBackwards"`
	xxx_hidden_OrderValue  isCursor_OrderValue    `protobuf_oneof:"order_value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	mi := &file_scrud_v1_cursor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_scrud_v1_cursor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Cursor) GetPrimaryId() string {
	if x != nil {
		if x.xxx_hidden_PrimaryId != nil {
			return *x.xxx_hidden_PrimaryId
		}
		return ""
	}
	return ""
}

func (x *Cursor) GetIsBackwards() bool {
	if x != nil {
		return x.xxx_hidden_IsBackwards
	}
	return false
}

func (x *Cursor) GetOrderString() string {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderString); ok {
			return x.OrderString
		}
	}
	return ""
}

func (x *Cursor) GetOrderBytes() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderBytes); ok {
			return x.OrderBytes
		}
	}
	return nil
}

func (x *Cursor) GetOrderInt32() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderInt32); ok {
			return x.OrderInt32
		}
	}
	return 0
}

func (x *Cursor) GetOrderInt64() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderInt64); ok {
			return x.OrderInt64
		}
	}
	return 0
}

func (x *Cursor) GetOrderSint32() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSint32); ok {
			return x.OrderSint32
		}
	}
	return 0
}

func (x *Cursor) GetOrderSint64() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSint64); ok {
			return x.OrderSint64
		}
	}
	return 0
}

func (x *Cursor) GetOrderSfixed32() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSfixed32); ok {
			return x.OrderSfixed32
		}
	}
	return 0
}

func (x *Cursor) GetOrderSfixed64() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSfixed64); ok {
			return x.OrderSfixed64
		}
	}
	return 0
}

func (x *Cursor) GetOrderUint32() uint32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderUint32); ok {
			return x.OrderUint32
		}
	}
	return 0
}

func (x *Cursor) GetOrderUint64() uint64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderUint64); ok {
			return x.OrderUint64
		}
	}
	return 0
}

func (x *Cursor) GetOrderFixed32() uint32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFixed32); ok {
			return x.OrderFixed32
		}
	}
	return 0
}

func (x *Cursor) GetOrderFixed64() uint64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFixed64); ok {
			return x.OrderFixed64
		}
	}
	return 0
}

func (x *Cursor) GetOrderFloat() float32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFloat); ok {
			return x.OrderFloat
		}
	}
	return 0
}

func (x *Cursor) GetOrderDouble() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderDouble); ok {
			return x.OrderDouble
		}
	}
	return 0
}

func (x *Cursor) GetOrderBool() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderBool); ok {
			return x.OrderBool
		}
	}
	return false
}

func (x *Cursor) GetOrderTimestamp() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderTimestamp); ok {
			return x.OrderTimestamp
		}
	}
	return nil
}

func (x *Cursor) GetOrderDuration() *durationpb.Duration {
	if x != nil {
		if x, ok := x.xxx_hidden_OrderValue.(*cursor_OrderDuration); ok {
			return x.OrderDuration
		}
	}
	return nil
}

func (x *Cursor) SetPrimaryId(v string) {
	x.xxx_hidden_PrimaryId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Cursor) SetIsBackwards(v bool) {
	x.xxx_hidden_IsBackwards = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Cursor) SetOrderString(v string) {
	x.xxx_hidden_OrderValue = &cursor_OrderString{v}
}

func (x *Cursor) SetOrderBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_OrderValue = &cursor_OrderBytes{v}
}

func (x *Cursor) SetOrderInt32(v int32) {
	x.xxx_hidden_OrderValue = &cursor_OrderInt32{v}
}

func (x *Cursor) SetOrderInt64(v int64) {
	x.xxx_hidden_OrderValue = &cursor_OrderInt64{v}
}

func (x *Cursor) SetOrderSint32(v int32) {
	x.xxx_hidden_OrderValue = &cursor_OrderSint32{v}
}

func (x *Cursor) SetOrderSint64(v int64) {
	x.xxx_hidden_OrderValue = &cursor_OrderSint64{v}
}

func (x *Cursor) SetOrderSfixed32(v int32) {
	x.xxx_hidden_OrderValue = &cursor_OrderSfixed32{v}
}

func (x *Cursor) SetOrderSfixed64(v int64) {
	x.xxx_hidden_OrderValue = &cursor_OrderSfixed64{v}
}

func (x *Cursor) SetOrderUint32(v uint32) {
	x.xxx_hidden_OrderValue = &cursor_OrderUint32{v}
}

func (x *Cursor) SetOrderUint64(v uint64) {
	x.xxx_hidden_OrderValue = &cursor_OrderUint64{v}
}

func (x *Cursor) SetOrderFixed32(v uint32) {
	x.xxx_hidden_OrderValue = &cursor_OrderFixed32{v}
}

func (x *Cursor) SetOrderFixed64(v uint64) {
	x.xxx_hidden_OrderValue = &cursor_OrderFixed64{v}
}

func (x *Cursor) SetOrderFloat(v float32) {
	x.xxx_hidden_OrderValue = &cursor_OrderFloat{v}
}

func (x *Cursor) SetOrderDouble(v float64) {
	x.xxx_hidden_OrderValue = &cursor_OrderDouble{v}
}

func (x *Cursor) SetOrderBool(v bool) {
	x.xxx_hidden_OrderValue = &cursor_OrderBool{v}
}

func (x *Cursor) SetOrderTimestamp(v *timestamppb.Timestamp) {
	if v == nil {
		x.xxx_hidden_OrderValue = nil
		return
	}
	x.xxx_hidden_OrderValue = &cursor_OrderTimestamp{v}
}

func (x *Cursor) SetOrderDuration(v *durationpb.Duration) {
	if v == nil {
		x.xxx_hidden_OrderValue = nil
		return
	}
	x.xxx_hidden_OrderValue = &cursor_OrderDuration{v}
}

func (x *Cursor) HasPrimaryId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Cursor) HasIsBackwards() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Cursor) HasOrderValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OrderValue != nil
}

func (x *Cursor) HasOrderString() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderString)
	return ok
}

func (x *Cursor) HasOrderBytes() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderBytes)
	return ok
}

func (x *Cursor) HasOrderInt32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderInt32)
	return ok
}

func (x *Cursor) HasOrderInt64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderInt64)
	return ok
}

func (x *Cursor) HasOrderSint32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSint32)
	return ok
}

func (x *Cursor) HasOrderSint64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSint64)
	return ok
}

func (x *Cursor) HasOrderSfixed32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSfixed32)
	return ok
}

func (x *Cursor) HasOrderSfixed64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSfixed64)
	return ok
}

func (x *Cursor) HasOrderUint32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderUint32)
	return ok
}

func (x *Cursor) HasOrderUint64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderUint64)
	return ok
}

func (x *Cursor) HasOrderFixed32() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFixed32)
	return ok
}

func (x *Cursor) HasOrderFixed64() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFixed64)
	return ok
}

func (x *Cursor) HasOrderFloat() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFloat)
	return ok
}

func (x *Cursor) HasOrderDouble() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderDouble)
	return ok
}

func (x *Cursor) HasOrderBool() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderBool)
	return ok
}

func (x *Cursor) HasOrderTimestamp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderTimestamp)
	return ok
}

func (x *Cursor) HasOrderDuration() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OrderValue.(*cursor_OrderDuration)
	return ok
}

func (x *Cursor) ClearPrimaryId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PrimaryId = nil
}

func (x *Cursor) ClearIsBackwards() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_IsBackwards = false
}

func (x *Cursor) ClearOrderValue() {
	x.xxx_hidden_OrderValue = nil
}

func (x *Cursor) ClearOrderString() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderString); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderBytes() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderBytes); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderInt32() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderInt32); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderInt64() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderInt64); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderSint32() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSint32); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderSint64() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSint64); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderSfixed32() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSfixed32); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderSfixed64() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderSfixed64); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderUint32() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderUint32); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderUint64() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderUint64); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderFixed32() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFixed32); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderFixed64() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFixed64); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderFloat() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderFloat); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderDouble() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderDouble); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderBool() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderBool); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderTimestamp() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderTimestamp); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

func (x *Cursor) ClearOrderDuration() {
	if _, ok := x.xxx_hidden_OrderValue.(*cursor_OrderDuration); ok {
		x.xxx_hidden_OrderValue = nil
	}
}

const Cursor_OrderValue_not_set_case case_Cursor_OrderValue = 0
const Cursor_OrderString_case case_Cursor_OrderValue = 3
const Cursor_OrderBytes_case case_Cursor_OrderValue = 4
const Cursor_OrderInt32_case case_Cursor_OrderValue = 5
const Cursor_OrderInt64_case case_Cursor_OrderValue = 6
const Cursor_OrderSint32_case case_Cursor_OrderValue = 7
const Cursor_OrderSint64_case case_Cursor_OrderValue = 8
const Cursor_OrderSfixed32_case case_Cursor_OrderValue = 9
const Cursor_OrderSfixed64_case case_Cursor_OrderValue = 10
const Cursor_OrderUint32_case case_Cursor_OrderValue = 11
const Cursor_OrderUint64_case case_Cursor_OrderValue = 12
const Cursor_OrderFixed32_case case_Cursor_OrderValue = 13
const Cursor_OrderFixed64_case case_Cursor_OrderValue = 14
const Cursor_OrderFloat_case case_Cursor_OrderValue = 15
const Cursor_OrderDouble_case case_Cursor_OrderValue = 16
const Cursor_OrderBool_case case_Cursor_OrderValue = 17
const Cursor_OrderTimestamp_case case_Cursor_OrderValue = 18
const Cursor_OrderDuration_case case_Cursor_OrderValue = 19

func (x *Cursor) WhichOrderValue() case_Cursor_OrderValue {
	if x == nil {
		return Cursor_OrderValue_not_set_case
	}
	switch x.xxx_hidden_OrderValue.(type) {
	case *cursor_OrderString:
		return Cursor_OrderString_case
	case *cursor_OrderBytes:
		return Cursor_OrderBytes_case
	case *cursor_OrderInt32:
		return Cursor_OrderInt32_case
	case *cursor_OrderInt64:
		return Cursor_OrderInt64_case
	case *cursor_OrderSint32:
		return Cursor_OrderSint32_case
	case *cursor_OrderSint64:
		return Cursor_OrderSint64_case
	case *cursor_OrderSfixed32:
		return Cursor_OrderSfixed32_case
	case *cursor_OrderSfixed64:
		return Cursor_OrderSfixed64_case
	case *cursor_OrderUint32:
		return Cursor_OrderUint32_case
	case *cursor_OrderUint64:
		return Cursor_OrderUint64_case
	case *cursor_OrderFixed32:
		return Cursor_OrderFixed32_case
	case *cursor_OrderFixed64:
		return Cursor_OrderFixed64_case
	case *cursor_OrderFloat:
		return Cursor_OrderFloat_case
	case *cursor_OrderDouble:
		return Cursor_OrderDouble_case
	case *cursor_OrderBool:
		return Cursor_OrderBool_case
	case *cursor_OrderTimestamp:
		return Cursor_OrderTimestamp_case
	case *cursor_OrderDuration:
		return Cursor_OrderDuration_case
	default:
		return Cursor_OrderValue_not_set_case
	}
}

type Cursor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PrimaryId   *string
	IsBackwards *bool
	// Fields of oneof xxx_hidden_OrderValue:
	// ─── strings & bytes ─────────────────────────────
	OrderString *string
	OrderBytes  []byte
	// ─── signed integers ────────────────────────────
	OrderInt32    *int32
	OrderInt64    *int64
	OrderSint32   *int32
	OrderSint64   *int64
	OrderSfixed32 *int32
	OrderSfixed64 *int64
	// ─── unsigned integers ──────────────────────────
	OrderUint32  *uint32
	OrderUint64  *uint64
	OrderFixed32 *uint32
	OrderFixed64 *uint64
	// ─── floating‑point ─────────────────────────────
	OrderFloat  *float32
	OrderDouble *float64
	// ─── logical values ─────────────────────────────
	OrderBool *bool
	// ─── well‑known types ───────────────────────────
	OrderTimestamp *timestamppb.Timestamp
	OrderDuration  *durationpb.Duration
	// -- end of xxx_hidden_OrderValue
}

func (b0 Cursor_builder) Build() *Cursor {
	m0 := &Cursor{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PrimaryId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_PrimaryId = b.PrimaryId
	}
	if b.IsBackwards != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_IsBackwards = *b.IsBackwards
	}
	if b.OrderString != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderString{*b.OrderString}
	}
	if b.OrderBytes != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderBytes{b.OrderBytes}
	}
	if b.OrderInt32 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderInt32{*b.OrderInt32}
	}
	if b.OrderInt64 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderInt64{*b.OrderInt64}
	}
	if b.OrderSint32 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderSint32{*b.OrderSint32}
	}
	if b.OrderSint64 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderSint64{*b.OrderSint64}
	}
	if b.OrderSfixed32 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderSfixed32{*b.OrderSfixed32}
	}
	if b.OrderSfixed64 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderSfixed64{*b.OrderSfixed64}
	}
	if b.OrderUint32 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderUint32{*b.OrderUint32}
	}
	if b.OrderUint64 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderUint64{*b.OrderUint64}
	}
	if b.OrderFixed32 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderFixed32{*b.OrderFixed32}
	}
	if b.OrderFixed64 != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderFixed64{*b.OrderFixed64}
	}
	if b.OrderFloat != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderFloat{*b.OrderFloat}
	}
	if b.OrderDouble != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderDouble{*b.OrderDouble}
	}
	if b.OrderBool != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderBool{*b.OrderBool}
	}
	if b.OrderTimestamp != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderTimestamp{b.OrderTimestamp}
	}
	if b.OrderDuration != nil {
		x.xxx_hidden_OrderValue = &cursor_OrderDuration{b.OrderDuration}
	}
	return m0
}

type case_Cursor_OrderValue protoreflect.FieldNumber

func (x case_Cursor_OrderValue) String() string {
	md := file_scrud_v1_cursor_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isCursor_OrderValue interface {
	isCursor_OrderValue()
}

type cursor_OrderString struct {
	// ─── strings & bytes ─────────────────────────────
	OrderString string `protobuf:"bytes,3,opt,name=order_string,json=orderString,oneof"`
}

type cursor_OrderBytes struct {
	OrderBytes []byte `protobuf:"bytes,4,opt,name=order_bytes,json=orderBytes,oneof"`
}

type cursor_OrderInt32 struct {
	// ─── signed integers ────────────────────────────
	OrderInt32 int32 `protobuf:"varint,5,opt,name=order_int32,json=orderInt32,oneof"`
}

type cursor_OrderInt64 struct {
	OrderInt64 int64 `protobuf:"varint,6,opt,name=order_int64,json=orderInt64,oneof"`
}

type cursor_OrderSint32 struct {
	OrderSint32 int32 `protobuf:"zigzag32,7,opt,name=order_sint32,json=orderSint32,oneof"`
}

type cursor_OrderSint64 struct {
	OrderSint64 int64 `protobuf:"zigzag64,8,opt,name=order_sint64,json=orderSint64,oneof"`
}

type cursor_OrderSfixed32 struct {
	OrderSfixed32 int32 `protobuf:"fixed32,9,opt,name=order_sfixed32,json=orderSfixed32,oneof"`
}

type cursor_OrderSfixed64 struct {
	OrderSfixed64 int64 `protobuf:"fixed64,10,opt,name=order_sfixed64,json=orderSfixed64,oneof"`
}

type cursor_OrderUint32 struct {
	// ─── unsigned integers ──────────────────────────
	OrderUint32 uint32 `protobuf:"varint,11,opt,name=order_uint32,json=orderUint32,oneof"`
}

type cursor_OrderUint64 struct {
	OrderUint64 uint64 `protobuf:"varint,12,opt,name=order_uint64,json=orderUint64,oneof"`
}

type cursor_OrderFixed32 struct {
	OrderFixed32 uint32 `protobuf:"fixed32,13,opt,name=order_fixed32,json=orderFixed32,oneof"`
}

type cursor_OrderFixed64 struct {
	OrderFixed64 uint64 `protobuf:"fixed64,14,opt,name=order_fixed64,json=orderFixed64,oneof"`
}

type cursor_OrderFloat struct {
	// ─── floating‑point ─────────────────────────────
	OrderFloat float32 `protobuf:"fixed32,15,opt,name=order_float,json=orderFloat,oneof"`
}

type cursor_OrderDouble struct {
	OrderDouble float64 `protobuf:"fixed64,16,opt,name=order_double,json=orderDouble,oneof"`
}

type cursor_OrderBool struct {
	// ─── logical values ─────────────────────────────
	OrderBool bool `protobuf:"varint,17,opt,name=order_bool,json=orderBool,oneof"`
}

type cursor_OrderTimestamp struct {
	// ─── well‑known types ───────────────────────────
	OrderTimestamp *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=order_timestamp,json=orderTimestamp,oneof"`
}

type cursor_OrderDuration struct {
	OrderDuration *durationpb.Duration `protobuf:"bytes,19,opt,name=order_duration,json=orderDuration,oneof"`
}

func (*cursor_OrderString) isCursor_OrderValue() {}

func (*cursor_OrderBytes) isCursor_OrderValue() {}

func (*cursor_OrderInt32) isCursor_OrderValue() {}

func (*cursor_OrderInt64) isCursor_OrderValue() {}

func (*cursor_OrderSint32) isCursor_OrderValue() {}

func (*cursor_OrderSint64) isCursor_OrderValue() {}

func (*cursor_OrderSfixed32) isCursor_OrderValue() {}

func (*cursor_OrderSfixed64) isCursor_OrderValue() {}

func (*cursor_OrderUint32) isCursor_OrderValue() {}

func (*cursor_OrderUint64) isCursor_OrderValue() {}

func (*cursor_OrderFixed32) isCursor_OrderValue() {}

func (*cursor_OrderFixed64) isCursor_OrderValue() {}

func (*cursor_OrderFloat) isCursor_OrderValue() {}

func (*cursor_OrderDouble) isCursor_OrderValue() {}

func (*cursor_OrderBool) isCursor_OrderValue() {}

func (*cursor_OrderTimestamp) isCursor_OrderValue() {}

func (*cursor_OrderDuration) isCursor_OrderValue() {}

var File_scrud_v1_cursor_proto protoreflect.FileDescriptor

const file_scrud_v1_cursor_proto_rawDesc = "" +
	"\n" +
	"\x15scrud/v1/cursor.proto\x12\bscrud.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8f\x06\n" +
	"\x06Cursor\x12\x1d\n" +
	"\n" +
	"primary_id\x18\x01 \x01(\tR\tprimaryId\x12!\n" +
	"\fis_backwards\x18\x02 \x01(\bR\visBackwards\x12#\n" +
	"\forder_string\x18\x03 \x01(\tH\x00R\vorderString\x12!\n" +
	"\vorder_bytes\x18\x04 \x01(\fH\x00R\n" +
	"orderBytes\x12!\n" +
	"\vorder_int32\x18\x05 \x01(\x05H\x00R\n" +
	"orderInt32\x12!\n" +
	"\vorder_int64\x18\x06 \x01(\x03H\x00R\n" +
	"orderInt64\x12#\n" +
	"\forder_sint32\x18\a \x01(\x11H\x00R\vorderSint32\x12#\n" +
	"\forder_sint64\x18\b \x01(\x12H\x00R\vorderSint64\x12'\n" +
	"\x0eorder_sfixed32\x18\t \x01(\x0fH\x00R\rorderSfixed32\x12'\n" +
	"\x0eorder_sfixed64\x18\n" +
	" \x01(\x10H\x00R\rorderSfixed64\x12#\n" +
	"\forder_uint32\x18\v \x01(\rH\x00R\vorderUint32\x12#\n" +
	"\forder_uint64\x18\f \x01(\x04H\x00R\vorderUint64\x12%\n" +
	"\rorder_fixed32\x18\r \x01(\aH\x00R\forderFixed32\x12%\n" +
	"\rorder_fixed64\x18\x0e \x01(\x06H\x00R\forderFixed64\x12!\n" +
	"\vorder_float\x18\x0f \x01(\x02H\x00R\n" +
	"orderFloat\x12#\n" +
	"\forder_double\x18\x10 \x01(\x01H\x00R\vorderDouble\x12\x1f\n" +
	"\n" +
	"order_bool\x18\x11 \x01(\bH\x00R\torderBool\x12E\n" +
	"\x0forder_timestamp\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x0eorderTimestamp\x12B\n" +
	"\x0eorder_duration\x18\x13 \x01(\v2\x19.google.protobuf.DurationH\x00R\rorderDurationB\r\n" +
	"\vorder_valueB\x85\x01\n" +
	"\fcom.scrud.v1B\vCursorProtoP\x01Z'github.com/advdv/scrud/scrud/v1;scrudv1\xa2\x02\x03SXX\xaa\x02\bScrud.V1\xca\x02\bScrud\\V1\xe2\x02\x14Scrud\\V1\\GPBMetadata\xea\x02\tScrud::V1b\beditionsp\xe8\a"

var file_scrud_v1_cursor_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_scrud_v1_cursor_proto_goTypes = []any{
	(*Cursor)(nil),                // 0: scrud.v1.Cursor
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 2: google.protobuf.Duration
}
var file_scrud_v1_cursor_proto_depIdxs = []int32{
	1, // 0: scrud.v1.Cursor.order_timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: scrud.v1.Cursor.order_duration:type_name -> google.protobuf.Duration
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_scrud_v1_cursor_proto_init() }
func file_scrud_v1_cursor_proto_init() {
	if File_scrud_v1_cursor_proto != nil {
		return
	}
	file_scrud_v1_cursor_proto_msgTypes[0].OneofWrappers = []any{
		(*cursor_OrderString)(nil),
		(*cursor_OrderBytes)(nil),
		(*cursor_OrderInt32)(nil),
		(*cursor_OrderInt64)(nil),
		(*cursor_OrderSint32)(nil),
		(*cursor_OrderSint64)(nil),
		(*cursor_OrderSfixed32)(nil),
		(*cursor_OrderSfixed64)(nil),
		(*cursor_OrderUint32)(nil),
		(*cursor_OrderUint64)(nil),
		(*cursor_OrderFixed32)(nil),
		(*cursor_OrderFixed64)(nil),
		(*cursor_OrderFloat)(nil),
		(*cursor_OrderDouble)(nil),
		(*cursor_OrderBool)(nil),
		(*cursor_OrderTimestamp)(nil),
		(*cursor_OrderDuration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scrud_v1_cursor_proto_rawDesc), len(file_scrud_v1_cursor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scrud_v1_cursor_proto_goTypes,
		DependencyIndexes: file_scrud_v1_cursor_proto_depIdxs,
		MessageInfos:      file_scrud_v1_cursor_proto_msgTypes,
	}.Build()
	File_scrud_v1_cursor_proto = out.File
	file_scrud_v1_cursor_proto_goTypes = nil
	file_scrud_v1_cursor_proto_depIdxs = nil
}
